#!/bin/bash

# Vars
DEFAULT_STORAGE="/srv/dvbr"
# Inputs
mode=$1
volume=$2
storage_path=$3
path=$4

# Check if storage path was provided, otherwise set default value:
if [ -z $storage_path ]; then
    storage_path=$DEFAULT_STORAGE
fi

# Display usage and help information
usage() {
    echo "Usage: $0 <mode> <volume> [path] [storage_path]"
    echo ""
    echo "Modes:"
    echo "  backup:  Backup the contents of a Docker volume."
    echo "  restore: Restore the contents of a Docker volume from a backup."
    echo "  update:  Update the script to the latest version."
    echo "           depending on the location of the script, this may require root privileges."
    echo "   ----------------------------------------------   "
    echo "Parameters:"
    echo "  mode:         see Section Modes"
    echo "  volume:       Name of the docker volume to backup or restore."
    echo "  storage_path: OPTIONAL! Overwrite the default storage directory."
    echo "  path:         OPTIONAL! The Path to the file to be restored."
    echo "   ----------------------------------------------   "
    echo "Examples:"
    echo "  $0 backup my_volume  -> Creates a .tar.gz file in $storage_path/my_volume with the contents of the volume my_volume."
    echo "  $0 restore my_volume /mnt/backups backup-20210101-120000.tar.gz -> Restores the contents of the backup file to the volume my_volume."
    echo "                              |             ╰> This has to be the FULL Path to the file."
    echo "                              ╰> This can be anything, not used in restore mode, but has to be provided"
    echo "  $0 update -> Updates the script to the latest version."
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed."
        exit 1
    fi
}

# Function to check for updates and update the script
check_for_updates() {
    local url="https://raw.githubusercontent.com/fsteltenkamp/dvbr/main/dvbr"
    local tmp_file="/tmp/dvbr_new"

    # Download the latest version of the script
    curl -s -o "$tmp_file" "$url"

    # Compare the downloaded file with the current script
    if ! cmp -s "$tmp_file" "$0"; then
        echo "A new version of the script is available. Updating..."
        mv "$tmp_file" "$0"
        chmod +x "$0"
        echo "Update complete. Please re-run the script."
        exit 0
    else
        rm "$tmp_file"
        echo "No update available."
        exit 0
    fi
}

# check storage location
check_storage() {
    if [ ! -d "$storage_path" ]; then
        echo "Error: Storage path is not valid, trying to create path..."
        mkdir -p $storage_path
        echo "Info: Tried to create storage path, try again."
        exit 1
    fi
}

# check argument count
check_arguments() {
    if [ "$mode" == "update" ]; then
        return
    elif [ "$mode" == "backup" ] || [ "$mode" == "restore" ]; then
        if [ -z "$volume" ]; then
            echo "Error: Volume name must be provided for backup or restore mode"
            usage
            exit 1
        fi
    else
        echo "Error: Invalid mode"
        usage
        exit 1
    fi
}

check_volume() {
    if [ -z "$volume" ]; then
        echo "Error: Volume name must be provided"
        exit 1
    fi
    volume_inspect=$(docker volume inspect "$volume")
    if [ "$volume_inspect" =~ ^\[\] ]; then
        echo "Error: Volume '$volume' does not exist"
        exit 1
    fi
}

startup_checks() {
    check_docker
    check_storage
    check_arguments
    check_volume
}

# MAIN

if [ "$1" == "update" ]; then
    echo "Checking for updates, please wait..."
    check_for_updates
fi

startup_checks

# If mode is 'backup':
if [ "$mode" == "backup" ]; then
    # check directories:
    finalpath=$storage_path/$volume
    mkdir -p $finalpath
    echo "Starting backup for Volume $volume..."
    # backup volume
    docker run --rm --mount source=$volume,target=/mnt/backmeup -v $finalpath/:/mnt/backups busybox sh -c "cd /mnt/backmeup && tar czf /mnt/backups/backup-$(date +'%Y%d%m-%H%M%S').tar.gz ."
    echo "Backup done."
fi

# If mode is 'restore', check if path is provided and valid
if [ "$mode" == "restore" ]; then
    if [ -z "$path" ]; then
        echo "Error: Path must be provided in restore mode"
        exit 1
    fi
    
    # Check if the file has a .tar.gz extension
    if [[ ! "$path" =~ \.tar\.gz$ ]]; then
        echo "Error: Path must be a valid .tar.gz file"
        exit 1
    fi
    
    # Check if the file exists
    if [ ! -f "$path" ]; then
        echo "Error: File does not exist"
        exit 1
    fi
    
    echo "Restoring backup to Volume $volume..."
    docker run --rm --mount source=$volume,target=/mnt/restoreme -v $path:$path busybox sh -c "cd /mnt/restoreme && tar x --overwrite -zf $path"
fi
