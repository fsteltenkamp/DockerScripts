#!/bin/bash

# Display usage and help information
usage() {
    echo "Usage: $0 <mode> <volume> [path]"
    echo ""
    echo "Modes:"
    echo "  backup:  Backup the contents of a Docker volume."
    echo "  restore: Restore the contents of a Docker volume from a backup."
    echo "  update:  Update the script to the latest version."
    echo "           depending on the location of the script, this may require root privileges."
}

# Function to check for updates and update the script
check_for_updates() {
    local url="https://raw.githubusercontent.com/fsteltenkamp/dvbr/main/dvbr"
    local tmp_file="/tmp/dvbr_new"

    # Download the latest version of the script
    curl -s -o "$tmp_file" "$url"

    # Compare the downloaded file with the current script
    if ! cmp -s "$tmp_file" "$0"; then
        echo "A new version of the script is available. Updating..."
        mv "$tmp_file" "$0"
        chmod +x "$0"
        echo "Update complete. Please re-run the script."
        exit 0
    else
        rm "$tmp_file"
        echo "No update available."
        exit 0
    fi
}

if [ "$1" == "update" ]; then
    echo "Checking for updates, please wait..."
    check_for_updates
fi

# Check if at least two arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Error: Invalid number of arguments"
    usage
    exit 1
fi

# Assign inputs to variables
mode=$1
volume=$2
path=$3

# Check if mode is either 'backup' or 'restore'
if [[ "$mode" != "backup" && "$mode" != "restore" ]]; then
    echo "Error: Mode must be either 'backup' or 'restore'"
    exit 1
fi

# Check if volume is provided
if [ -z "$volume" ]; then
    echo "Error: Volume name must be provided"
    exit 1
fi

volume_check=$(docker inspect "$volume")

# Check if the output of the inspect command starts with "[]"
if [[ "$volume_check" =~ ^\[\] ]]; then
    echo "Error: Volume '$volume' does not exist"
    exit 1
fi

# If mode is 'backup':
if [ "$mode" == "backup" ]; then
    # check directories:
    mkdir -p /mnt/dvbr/$volume
    echo "Starting backup for Volume $volume..."
    # backup volume
    docker run --rm --mount source=$volume,target=/mnt/backmeup -v /mnt/dvbr/$volume/:/mnt/backups busybox sh -c "cd /mnt/backmeup && tar czf /mnt/backups/backup-$(date +'%Y%d%m-%H%M%S').tar.gz ."
    echo "Backup done."
fi

# If mode is 'restore', check if path is provided and valid
if [ "$mode" == "restore" ]; then
    if [ -z "$path" ]; then
        echo "Error: Path must be provided in restore mode"
        exit 1
    fi
    
    # Check if the file has a .tar.gz extension
    if [[ ! "$path" =~ \.tar\.gz$ ]]; then
        echo "Error: Path must be a valid .tar.gz file"
        exit 1
    fi
    
    # Check if the file exists
    if [ ! -f "$path" ]; then
        echo "Error: File does not exist"
        exit 1
    fi
    
    echo "Restoring backup to Volume $volume..."
    docker run --rm --mount source=$volume,target=/mnt/restoreme -v /mnt/dvbr/$volume/:/mnt/backups busybox sh -c "cd /mnt/restoreme && tar x --overwrite -zf /mnt/backups/$path"
fi
