#!/bin/bash

# Vars
VERSION="1.2.0"
STORAGE="/srv/dvbr"
# Inputs
mode=$1
volume=$2
path=$3

# Display usage and help information
usage() {
    echo "Usage: $0 <mode> <volume> [path]"
    echo ""
    echo "Modes:"
    echo "  backup:  Backup the contents of a Docker volume."
    echo "  restore: Restore the contents of a Docker volume from a backup."
    echo "   ----------------------------------------------   "
    echo "Parameters:"
    echo "  mode:         see Section Modes"
    echo "  volume:       Name of the docker volume to backup or restore."
    echo "  path:         The Path to the file to be restored. - Only used in restore mode."
    echo "   ----------------------------------------------   "
    echo "Examples:"
    echo "  $0 backup my_volume  -> Creates a .tar.gz file in $storage_path/my_volume with the contents of the volume my_volume."
    echo "  $0 restore my_volume backup-20210101-120000.tar.gz -> Copies the contents of the file to the volume my_volume."
    echo "                                        â•°> This has to be the FULL Path to the file."
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed."
        exit 1
    fi
}

# Function to check for updates and update the script
check_for_updates() {
    local url="https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvbr"
    local version_url="https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvbr.ver"
    local tmp_file="/tmp/dvbr_new"

    # Check if the content of $version_url is different to our $VERSION var:
    local REMOTE_VERSION=$(curl -s $version_url) # catch curl errors:
    if [ $? -ne 0 ]; then
        echo "Error: Could not check for updates."
        return
    fi
    if [ "$REMOTE_VERSION" != "$VERSION" ]; then
        echo "A new version of the script is available. Updating..."
        curl -s -o "$tmp_file" "$url"
        mv "$tmp_file" "$0"
        chmod +x "$0"
        echo "Update complete. Please re-run the script. (arrow-up + enter)"
        exit 0
    fi
}

# check storage location
check_storage() {
    if [ ! -d "$STORAGE" ]; then
        echo "Error: Storage path is not valid, trying to create path..."
        mkdir -p $STORAGE
        echo "Info: Tried to create storage path, try again."
        exit 1
    fi
}

# check argument count
check_arguments() {
    if [ "$mode" == "backup" ] || [ "$mode" == "restore" ]; then
        if [ -z "$volume" ]; then
            echo "Error: Volume name must be provided for backup or restore mode"
            usage
            exit 1
        fi
        if [ "$mode" == "restore" ] && [ -z "$path" ]; then
            echo "Error: Path must be provided in restore mode"
            usage
            exit 1
        fi
    else
        echo "Error: Invalid mode"
        usage
        exit 1
    fi
}

check_volume() {
    if [ -z "$volume" ]; then
        echo "Error: Volume name must be provided"
        exit 1
    fi
    volume_inspect=$(docker volume inspect "$volume")
    if [[ "$volume_inspect" =~ ^\[\] ]]; then
        echo "Error: Volume '$volume' does not exist"
        exit 1
    fi
}

install_other_scripts() {
    # request permission:
    echo "This action will install several more scripts on this system to aid in handling docker volumes."
    echo "The Scripts will be installed in /usr/local/bin."
    echo "Do you want to continue? (y/n)"
    read -r answer
    # only continue if user gives permission:
    if [ "$answer" == "y" ]; then
        # download the scripts:
        curl -s -o /usr/local/bin/dvbr https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvbr
        curl -s -o /usr/local/bin/dvls https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvls
        curl -s -o /usr/local/bin/dvfbr https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvfbr
        curl -s -o /usr/local/bin/dvsh https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvsh
        curl -s -o /usr/local/bin/dvsmbcr https://raw.githubusercontent.com/fsteltenkamp/DockerScripts/main/dvsmbcr
        # make them executable:
        chmod +x /usr/local/bin/dvbr
        chmod +x /usr/local/bin/dvfbr
        chmod +x /usr/local/bin/dvls
        chmod +x /usr/local/bin/dvsh
        chmod +x /usr/local/bin/dvsmbcr
        echo "Scripts installed. You can now use the following scripts:"
        echo "- dvbr.....backup and restore Docker Volumes."
        echo "- dvls.....list files inside a Docker Volume."
        echo "- dvfbr....start a filebrowser to manage files in a Docker Volume."
        echo "- dvsh.....start a shell inside a Docker Volume."
        echo "- dvsmbcr..easily create a new Volume that is connected to a SMB Share."
    fi
}

# MAIN
# check if the user wants to install the other scripts:
if [[ "$@" == *"--install"* ]]; then
    install_other_scripts
    exit
fi
# check if the user wants to update the script:
if [[ "$@" == *"--update"* ]]; then
    check_for_updates
    exit
fi
check_docker
check_storage
check_arguments
check_volume

# If mode is 'backup':
if [ "$mode" == "backup" ]; then
    # check directories:
    finalpath=$STORAGE/$volume
    mkdir -p $finalpath
    echo "Starting backup for Volume $volume..."
    # backup volume
    docker run --rm --mount source=$volume,target=/mnt/backmeup -v $finalpath/:/mnt/backups busybox sh -c "cd /mnt/backmeup && tar czf /mnt/backups/backup-$(date +'%Y%d%m-%H%M%S').tar.gz ."
    echo "Backup done."
fi

# If mode is 'restore', check if path is provided and valid
if [ "$mode" == "restore" ]; then
    # Check if the file has a .tar.gz extension
    if [[ ! "$path" =~ \.tar\.gz$ ]]; then
        echo "Error: Path must be a valid .tar.gz file"
        exit 1
    fi
    
    # Check if the file exists
    if [ ! -f "$path" ]; then
        echo "Error: File does not exist"
        exit 1
    fi
    
    echo "Restoring backup to Volume $volume..."
    docker run --rm --mount source=$volume,target=/mnt/restoreme -v $path:$path busybox sh -c "cd /mnt/restoreme && rm -rf ./* && tar x --overwrite -zf $path"
fi
